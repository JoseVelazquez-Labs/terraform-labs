
############################################################
# 1Ô∏è‚É£ ¬øQu√© es un provider?
#
# Un *provider* (proveedor) es el ‚Äúconector‚Äù entre Terraform y un servicio.
# Ejemplo: si quieres crear recursos en Azure o AWS, necesitas su provider.
#
# Cada provider sabe c√≥mo comunicarse con la API del servicio.
# Sin provider, Terraform no puede crear ni modificar nada.
############################################################


############################################################
# 2Ô∏è‚É£ BLOQUE TERRAFORM ‚Üí ‚Äúrequired_providers‚Äù
#
# Aqu√≠ indicamos QU√â proveedores usaremos y sus versiones.
# Terraform descargar√° autom√°ticamente esos providers desde el
# registro oficial (registry.terraform.io).
############################################################

terraform {
  required_version = ">= 1.5.0" # (Opcional, pero recomendable)

  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm" # Azure Resource Manager
      version = "~> 3.100"          # Usa la versi√≥n 3.x m√°s reciente
    }

    aws = {
      source  = "hashicorp/aws"     # Amazon Web Services
      version = "~> 5.60"
    }

    kubernetes = {
      source  = "hashicorp/kubernetes" # Para clusters K8s
      version = "~> 2.33"
    }
  }
}


############################################################
# 3Ô∏è‚É£ CONFIGURAR UN PROVIDER
#
# Una vez declarado, debemos ‚Äúconfigurarlo‚Äù.
# Aqu√≠ se definen credenciales, regi√≥n o suscripci√≥n, etc.
# Normalmente los datos sensibles se guardan en variables o
# se leen desde el entorno (no se escriben directamente).
############################################################

# üîπ Azure Provider
provider "azurerm" {
  features {}  # Siempre obligatorio (aunque est√© vac√≠o)
  subscription_id = var.azure_subscription_id
  tenant_id       = var.azure_tenant_id
  use_msi         = false # MSI es otra forma de autenticaci√≥n en Azure
}

# üîπ AWS Provider
provider "aws" {
  region  = var.aws_region   # Ejemplo: "eu-west-1"
  profile = var.aws_profile  # Si tienes varios perfiles AWS configurados
}

# üîπ Kubernetes Provider
provider "kubernetes" {
  host                   = var.kube_host
  cluster_ca_certificate = base64decode(var.kube_ca)
  token                  = var.kube_token
}


############################################################
# 4Ô∏è‚É£ VARIAS CONFIGURACIONES DEL MISMO PROVIDER (ALIAS)
#
# Puedes usar el mismo provider varias veces.
# Ejemplo: trabajar en dos regiones o cuentas distintas de AWS.
############################################################

# Dos configuraciones distintas de AWS
provider "aws" {
  alias  = "eu"
  region = "eu-west-1"
}

provider "aws" {
  alias  = "us"
  region = "us-east-1"
}

# Usamos los alias en los recursos:
resource "aws_s3_bucket" "logs_eu" {
  provider = aws.eu
  bucket   = "logs-eu-${random_id.suffix.hex}"
}

resource "aws_s3_bucket" "logs_us" {
  provider = aws.us
  bucket   = "logs-us-${random_id.suffix.hex}"
}

resource "random_id" "suffix" {
  byte_length = 3
}


############################################################
# 5Ô∏è‚É£ USO DE PROVIDERS EN M√ìDULOS
#
# Cuando usas m√≥dulos, cada uno puede tener sus propios providers.
# En el m√≥dulo ‚Äúpadre‚Äù, debes pasarle qu√© configuraci√≥n usar.
############################################################

# Ejemplo de m√≥dulo ‚Äúnetwork‚Äù
module "network" {
  source = "./modules/network"

  # Le indicamos qu√© configuraci√≥n del provider debe usar:
  providers = {
    aws.eu = aws.eu
    aws.us = aws.us
  }

  # Variables del m√≥dulo (por ejemplo):
  # vpc_cidr = "10.0.0.0/16"
}


############################################################
# 6Ô∏è‚É£ ARCHIVO DE BLOQUEO (.terraform.lock.hcl)
#
# Terraform guarda un archivo autom√°tico con los providers y sus versiones.
# Este archivo asegura que todos los que usen el proyecto descarguen
# exactamente las mismas versiones (muy importante para equipos).
#
# ‚úÖ No lo creas t√∫, lo genera Terraform al hacer ‚Äúterraform init‚Äù.
# ‚úÖ Debes subirlo a tu repositorio (Git) para mantener consistencia.
############################################################

# Ejemplo (no lo escribes t√∫):
# .terraform.lock.hcl
#   ‚îú‚îÄ‚îÄ Provider: hashicorp/aws = 5.60.0
#   ‚îú‚îÄ‚îÄ Provider: hashicorp/azurerm = 3.100.0
#   ‚îî‚îÄ‚îÄ Checksums: SHA256 validaciones


############################################################
# 7Ô∏è‚É£ CREDENCIALES Y AUTENTICACI√ìN
#
# Terraform puede usar muchas formas de autenticarse con cada servicio.
# La recomendada: usar credenciales externas (CLI, entorno, perfiles).
############################################################

# üîπ En Azure:
#   - ‚Äúaz login‚Äù desde terminal (Terraform detectar√° tu sesi√≥n)
#   - Variables de entorno:
#       ARM_CLIENT_ID, ARM_CLIENT_SECRET, ARM_TENANT_ID, ARM_SUBSCRIPTION_ID
#   - Managed Identity: usa_msi = true

# üîπ En AWS:
#   - Archivos de credenciales (~/.aws/credentials)
#   - Variables de entorno:
#       AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_SESSION_TOKEN
#   - Roles y SSO (inicio de sesi√≥n con AWS CLI)

# üîπ En Kubernetes:
#   - Archivo kubeconfig local: config_path y config_context
#   - Certificados y tokens (como en el ejemplo de arriba)


############################################################
# 8Ô∏è‚É£ INICIALIZAR E INSTALAR PROVIDERS
#
# El comando ‚Äúterraform init‚Äù descarga los providers necesarios.
# Usa ‚Äú-upgrade‚Äù si quieres buscar versiones m√°s nuevas dentro de tu rango.
############################################################

# terraform init          # Descarga los providers
# terraform init -upgrade # Actualiza los providers dentro de los l√≠mites de versi√≥n


############################################################
# 9Ô∏è‚É£ MIRRORS Y CACH√â (AVANZADO)
#
# Si trabajas en entornos sin Internet o empresariales, puedes crear
# un espejo local de providers. Esto se configura en el archivo del CLI,
# no en el c√≥digo del proyecto.
############################################################

# Archivo: ~/.terraformrc  o  $TF_CLI_CONFIG_FILE
# Ejemplo:
# provider_installation {
#   filesystem_mirror {
#     path = "/opt/terraform/providers"
#   }
#   network_mirror {
#     url  = "https://internal.example.com/terraform"
#   }
#   direct {} # Permite descargar del registro p√∫blico si no hay espejo
# }


############################################################
# BUENAS PR√ÅCTICAS CON PROVIDERS
############################################################
# ‚úÖ Siempre fija versiones con ‚Äúrequired_providers‚Äù.
# ‚úÖ No uses ‚Äúlatest‚Äù; eso rompe compatibilidad.
# ‚úÖ Versiona el archivo ‚Äú.terraform.lock.hcl‚Äù en Git.
# ‚úÖ Usa alias (provider ‚Äúaws‚Äù { alias = ‚Äúprod‚Äù }) para multi-regi√≥n o multi-cuenta.
# ‚úÖ Mant√©n credenciales fuera del c√≥digo (usa entorno o perfiles).
# ‚úÖ Documenta c√≥mo inicializar el proyecto (‚Äúterraform init‚Äù, etc.)
############################################################
